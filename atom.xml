<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jackBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-07T03:47:04.026Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tuuuuuuuuu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaScript设计模式之工厂模式</title>
    <link href="http://yoursite.com/2019/03/07/factory/"/>
    <id>http://yoursite.com/2019/03/07/factory/</id>
    <published>2019-03-07T03:15:35.000Z</published>
    <updated>2019-03-07T03:47:04.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a><strong>简单工厂模式</strong></h2><blockquote><p><strong>1.1 简单工厂模式</strong></p></blockquote><p>简单工厂模式又叫静态工厂模式，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function UserFactory(role) &#123;</span><br><span class="line">  function SuperAdmin() &#123;</span><br><span class="line">    this.name = &apos;超级管理员&apos;;</span><br><span class="line">    this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;, &apos;应用数据&apos;, &apos;权限管理&apos;]</span><br><span class="line">  &#125;</span><br><span class="line">  function Admin() &#123;</span><br><span class="line">    this.name = &apos;管理员&apos;;</span><br><span class="line">    this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;, &apos;应用数据&apos;]</span><br><span class="line">  &#125;</span><br><span class="line">  function NormalUser() &#123;</span><br><span class="line">    this.name = &apos;普通用户&apos;;</span><br><span class="line">    this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switch (role) &#123;</span><br><span class="line">    case &apos;superAdmin&apos;:</span><br><span class="line">      return new SuperAdmin();</span><br><span class="line">      break;</span><br><span class="line">    case &apos;Admin&apos;:</span><br><span class="line">      return new Admin();</span><br><span class="line">      break;</span><br><span class="line">    case &apos;NormalUser&apos;:</span><br><span class="line">      return new NormalUser();</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw new Error(&apos;参数错误，可选参数为：superAdmin、admin、user&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优化后</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function UserFactory(role) &#123;</span><br><span class="line">  function User(opt) &#123;</span><br><span class="line">    this.name = opt.name;</span><br><span class="line">    this.viewPage = opt.viewPage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switch (role) &#123;</span><br><span class="line">    case &apos;superAdmin&apos;:</span><br><span class="line">      return new User(&#123;name:&apos;超级管理员&apos;, viewPage:[&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;, &apos;应用数据&apos;, &apos;权限管理&apos;]&#125;);</span><br><span class="line">      break;</span><br><span class="line">    case &apos;Admin&apos;:</span><br><span class="line">      return new User(&#123;name:&apos;管理员&apos;, viewPage:[&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;, &apos;应用数据&apos;]&#125;);</span><br><span class="line">      break;</span><br><span class="line">    case &apos;NormalUser&apos;:</span><br><span class="line">      return new User(&#123;name:&apos;普通用户&apos;, viewPage:[&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;]&#125;);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw new Error(&apos;参数错误，可选参数为：superAdmin、admin、user&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title=" 工厂方法模式"></a><strong> 工厂方法模式</strong></h2><blockquote><p><strong>1.2 工厂方法模式</strong></p></blockquote><p>工厂方法模式的本意是将实际创建对象的工作推迟到子类中，这样核心类就变成了抽象类。但是在JavaScript中很难像传统面向对象那样去实现创建抽象类。所以在JavaScript中我们只需要参考它的核心思想即可。我们可以将工厂方法看作是一个实例化对象的工厂类。</p><p>在简单工厂模式中，我们每添加一个构造函数需要修改两处代码。现在我们使用工厂方法模式改造上面的代码，刚才提到，工厂方法我们只把它看作是一个实例化对象的工厂，它只做实例化对象这一件事情！ 我们采用安全模式创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> // 安全模式下创建的工厂方法函数</span><br><span class="line"></span><br><span class="line"> let UserFactory = function(role) &#123;</span><br><span class="line">   if (this intanceof UserFactory) &#123;</span><br><span class="line">     var s = new this[role];</span><br><span class="line">     return s;</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     return new UserFactory(role);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 工厂方法函数的原型中设置所有对象的构造函数</span><br><span class="line"></span><br><span class="line"> UserFactory.protoType = &#123;</span><br><span class="line">   function SuperAdmin() &#123;</span><br><span class="line">     this.name = &apos;超级管理员&apos;;</span><br><span class="line">     this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;, &apos;应用数据&apos;, &apos;权限管理&apos;]</span><br><span class="line">   &#125;</span><br><span class="line">   function Admin() &#123;</span><br><span class="line">     this.name = &apos;管理员&apos;;</span><br><span class="line">     this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;, &apos;应用数据&apos;]</span><br><span class="line">   &#125;</span><br><span class="line">   function NormalUser() &#123;</span><br><span class="line">     this.name = &apos;普通用户&apos;;</span><br><span class="line">     this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">let superAdmin = UserFactory(&apos;SuperAdmin&apos;);</span><br><span class="line">let admin = UserFactory(&apos;Admin&apos;)</span><br><span class="line">let normalUser = UserFactory(&apos;NormalUser&apos;)</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title=" 抽象工厂模式"></a><strong> 抽象工厂模式</strong></h2><blockquote><p><strong>1.3 抽象工厂模式</strong></p></blockquote><p>上面介绍了简单工厂模式和工厂方法模式都是直接生成实例，但是抽象工厂模式不同，抽象工厂模式并不直接生成实例， 而是用于对产品类簇的创建。</p><p>上面例子中的superAdmin，admin，user三种用户角色，其中user可能是使用不同的社交媒体账户进行注册的，例如：wechat，qq，weibo。那么这三类社交媒体账户就是对应的类簇。在抽象工厂中，类簇一般用父类定义，并在父类中定义一些抽象方法，再通过抽象工厂让子类继承父类。所以，抽象工厂其实是实现子类继承父类的方法。</p><p>上面提到的抽象方法是指声明但不能使用的方法。在其他传统面向对象的语言中常用abstract进行声明，但是在JavaScript中，abstract是属于保留字，但是我们可以通过在类的方法中抛出错误来模拟抽象类。</p><p>下面我们分别来实现账号管理的抽象工厂方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">let AccountAbstractFactory = function(subType, superType)&#123;</span><br><span class="line">  // 判断抽象工厂中是否具有改抽象类</span><br><span class="line">  if (typeof AccountAbstractFactory[superType] === &apos;function&apos;) &#123;</span><br><span class="line">    // 缓存类</span><br><span class="line">    function F()&#123;&#125;;</span><br><span class="line">    F.protoType = new AccountAbstractFactory[superType]();</span><br><span class="line">    // 将子类的constractor指向子类</span><br><span class="line">    subType.construtor = subType;</span><br><span class="line">    // 子类继承父类</span><br><span class="line">    subType.protoType = new F();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    throw new Error(&apos;抽象类不存在！&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 微信用户抽象类</span><br><span class="line">AccountAbstractFactory.weChatUser = function()&#123;</span><br><span class="line">  this.type = &apos;weChat&apos;;</span><br><span class="line">&#125;</span><br><span class="line">AccountAbstractFactory.weChatUser.protoType = function()&#123;</span><br><span class="line">  getName: function()&#123;</span><br><span class="line">    return new Error(&apos;抽象方法不能调用&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// qq用户抽象类</span><br><span class="line">AccountAbstractFactory.QqUser = function() &#123;</span><br><span class="line">  this.type = &apos;qq&apos;;</span><br><span class="line">&#125;</span><br><span class="line">AccountAbstractFactory.QqUser.prototype = &#123;</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    return new Error(&apos;抽象方法不能调用&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//新浪微博用户抽象类</span><br><span class="line">AccountAbstractFactory.WeiboUser = function() &#123;</span><br><span class="line">  this.type = &apos;weibo&apos;;</span><br><span class="line">&#125;</span><br><span class="line">AccountAbstractFactory.WeiboUser.prototype = &#123;</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    return new Error(&apos;抽象方法不能调用&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们来定义普通用户的子类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 普通微信用户子类</span><br><span class="line">function UserOfWechat(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;]</span><br><span class="line">&#125;</span><br><span class="line">// 抽象工厂实现WechatUser类的继承</span><br><span class="line">AccountAbstractFactory(UserOfWechat, &apos;WechatUser&apos;);</span><br><span class="line">// 子类中重写抽象方法</span><br><span class="line">UserOfWechat.prototype.getName = function() &#123;</span><br><span class="line">  return this.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 普通qq用户子类</span><br><span class="line">function UserOfQq(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;]</span><br><span class="line">&#125;</span><br><span class="line">// 抽象工厂实现QqUser类的继承</span><br><span class="line">AccountAbstractFactory(UserOfQq, &apos;QqUser&apos;);</span><br><span class="line">// 子类中重写抽象方法</span><br><span class="line">UserOfQq.prototype.getName = function() &#123;</span><br><span class="line">  return this.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 普通微博用户子类</span><br><span class="line">function UserOfWeibo(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.viewPage = [&apos;首页&apos;, &apos;通讯录&apos;, &apos;发现页&apos;]</span><br><span class="line">&#125;</span><br><span class="line">// 抽象工厂实现WeiboUser类的继承</span><br><span class="line">AccountAbstractFactory(UserOfWeibo, &apos;WeiboUser&apos;);</span><br><span class="line">// 子类中重写抽象方法</span><br><span class="line">UserOfWeibo.prototype.getName = function() &#123;</span><br><span class="line">  return this.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码我们分别定义了UserOfWechat，UserOfQq，UserOfWeibo三种类。这三个类作为子类通过抽象工厂方法实现继承。特别需要注意的是，调用抽象工厂方法后不要忘记重写抽象方法，否则在子类的实例中调用抽象方法会报错。<br>我们来分别对这三种类进行实例化，检测抽象工厂方法是实现了类簇的管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 实例化微信用户</span><br><span class="line">let wechatUserA = new UserOfWechat(&apos;微信小李&apos;);</span><br><span class="line">console.log(wechatUserA.getName(), wechatUserA.type); //微信小李 wechat</span><br><span class="line">let wechatUserB = new UserOfWechat(&apos;微信小王&apos;);</span><br><span class="line">console.log(wechatUserB.getName(), wechatUserB.type); //微信小王 wechat</span><br><span class="line"></span><br><span class="line">// 实例化qq用户</span><br><span class="line">let qqUserA = new UserOfQq(&apos;QQ小李&apos;);</span><br><span class="line">console.log(qqUserA.getName(), qqUserA.type); //QQ小李 qq</span><br><span class="line">let qqUserB = new UserOfQq(&apos;QQ小王&apos;);</span><br><span class="line">console.log(qqUserB.getName(), qqUserB.type); //QQ小王 qq</span><br><span class="line"></span><br><span class="line">// 实例化微博用户</span><br><span class="line">let weiboUserA =new UserOfWeibo(&apos;微博小李&apos;);</span><br><span class="line">console.log(weiboUserA.getName(), weiboUserA.type); //微博小李 weibo</span><br><span class="line">let weiboUserB =new UserOfWeibo(&apos;微博小王&apos;);</span><br><span class="line">console.log(weiboUserB.getName(), weiboUserB.type); //微博小王 weibo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;&lt;strong&gt;简单工厂模式&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.1 简单工厂模式&lt;/stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建者模式</title>
    <link href="http://yoursite.com/2019/03/07/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/03/07/创建者模式/</id>
    <published>2019-03-07T03:02:55.000Z</published>
    <updated>2019-03-07T03:46:25.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript设计模式-之-创建者模式"><a href="#JavaScript设计模式-之-创建者模式" class="headerlink" title="JavaScript设计模式 之 创建者模式"></a>JavaScript设计模式 之 <strong>创建者模式</strong></h3><blockquote><p>创建者模式是将一个复杂对象的构建层与其表示层互相分离，同样的构建过程可采用不同的表示。</p></blockquote><blockquote><p>与工厂模式的区别<br>工厂模式主要是为了创建对象实例或者类簇（抽象工厂），关心的是最终产出（创建）的是什么。不关心你的创建整个过程，仅仅需要知道你最终创建的结果。所以通过工厂模式我们得到是对象实例或者类簇。而创建者模式在创建对象时更为复杂一些，虽然其目的也是为了创建对象，但是它更多关心的是创建这个对象的整个过程，甚至于创建对象的每一个细节，比如创建一个人，我们创建的结果不仅仅是得到人的实例，还要关注创建人的时候，这个人穿什么衣服，男的还是女的，兴趣爱好是什么。所以说创造者莫事儿更注重的是创建的细节，而在本例中我们看到，我们需要的不仅仅是应聘者的一个实例，还要在创建过程中注意一下这位应聘者都有哪些兴趣爱好、姓名等信息。他期望的职位是什么、这些关注点都是需要我们创建的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// 创建人类</span><br><span class="line">var Human = function(param) &#123;</span><br><span class="line">  // 技能</span><br><span class="line">  this.skill = param &amp;&amp; param.skill || &apos;保密&apos;</span><br><span class="line">  // 爱好</span><br><span class="line">  this.hobby = param &amp;&amp; param.hobby || &apos;保密&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 人类原型方法</span><br><span class="line">Human.protoType = &#123;</span><br><span class="line">  getSkill: function() &#123;</span><br><span class="line">    return this.skill;</span><br><span class="line">  &#125;,</span><br><span class="line">  getHobby：function() &#123;</span><br><span class="line">    return this.hobby;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化姓名类</span><br><span class="line">var Named = function(name) &#123;</span><br><span class="line">  var that = this;</span><br><span class="line">  // 构造器</span><br><span class="line">  // 构造函数解析姓名的姓与名</span><br><span class="line">  (function()&#123;</span><br><span class="line">    that.wholeName = name;</span><br><span class="line">    if (name.indexOf(&apos; &apos;) &gt; -1) &#123;</span><br><span class="line">      that.FirstName = name.slice(0, name.indexOf(&apos; &apos;));</span><br><span class="line">      that.secondName = name.slice(name.indexOf(&apos; &apos;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(name, that)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化职位类</span><br><span class="line">var Work = function(work) &#123;</span><br><span class="line">  var that = this;</span><br><span class="line">  // 构造器</span><br><span class="line">  // 构造函数中传入的职位特征来设置相应职位以及描述</span><br><span class="line">  (function(work, that)&#123;</span><br><span class="line">    switch(work)&#123;</span><br><span class="line">      case &apos;code&apos;:</span><br><span class="line">        that.work = &apos;工程师&apos;;</span><br><span class="line">        that.workDescript = &apos;每天都在变成中度过&apos;;</span><br><span class="line">        break;</span><br><span class="line">      case &apos;UI&apos;:</span><br><span class="line">      case &apos;UE&apos;:</span><br><span class="line">        that.work = &apos;设计师&apos;;</span><br><span class="line">        that.workDescipt = &apos;设计更似一种艺术&apos;;</span><br><span class="line">        break;</span><br><span class="line">      case &apos;teach&apos;:</span><br><span class="line">        that.work = &apos;教师&apos;；</span><br><span class="line">        that.workDescript = &apos;分享也是一种快乐&apos;;</span><br><span class="line">        break;</span><br><span class="line">      deault:</span><br><span class="line">        that.work = work;</span><br><span class="line">        that.workDescrip = &apos;对不起，我们还不清楚您所选择的的职位相关描述&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(work, that);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 跟换期望职位</span><br><span class="line">Work.protoType.changeWork = function(work) &#123;</span><br><span class="line">  this.work = work;</span><br><span class="line">&#125;</span><br><span class="line">// 添加对职位的描述</span><br><span class="line">Work.protoType.changeDescript = function(setence) &#123;</span><br><span class="line">  this.changeDescript = setence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建一个应聘者类 组合调用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/****</span><br><span class="line">* 应聘者建造者</span><br><span class="line">* 参数 name: 姓名（全名）</span><br><span class="line">* 参数 work：期望职位</span><br><span class="line">/</span><br><span class="line">var Person = function(name, work)&#123;</span><br><span class="line">  // 创建应聘者缓存对象</span><br><span class="line">  var _person = new Huamn();</span><br><span class="line">  // 创建应聘者姓名解析对象</span><br><span class="line">  _person.name = new Named(name);</span><br><span class="line">  // 创建应聘者期望职位</span><br><span class="line">  _person.word = new Work(work);</span><br><span class="line">  return _person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var person = new Person(&apos;xiao ming&apos;, &apos;code&apos;);</span><br><span class="line">console.log(person.skill);                       // 保密</span><br><span class="line">console.log(person.name.FirstName);              // xiao</span><br><span class="line">console.log(person.work.work);                   // 工程师</span><br><span class="line">console.log(person.work.workDescript);           // &apos;每天都在变成中度过&apos;;</span><br><span class="line">person.work.changeDescript(&apos;更改一下职位描述&apos;);</span><br><span class="line">console.log(person.work.workDescript);           // 更改一下职位描述</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript设计模式-之-创建者模式&quot;&gt;&lt;a href=&quot;#JavaScript设计模式-之-创建者模式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript设计模式 之 创建者模式&quot;&gt;&lt;/a&gt;JavaScript设计模式 之 &lt;st
      
    
    </summary>
    
    
  </entry>
  
</feed>
